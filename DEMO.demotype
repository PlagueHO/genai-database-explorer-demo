// Methods for determining if tables, views and stored procedures exist in the semantic model by schema and name. Don't use Linq.
[end]
// Create a persistent agent using Azure.AI.Agents.Persistent by first creating an agentClient
[end]
Add a .NET 9 Web API app project that provides CRUD operations for the Semantic Model provided by #file:SemanticModel.cs to the existing solution #file:GenAIDBExplorer.sln. Don't worry about authZ/authN as it will only run locally at the moment. It should use the #file:GenAIDBExplorer.Core project to the access to the semantic model.
[end]
Add a .NET 9 Web API app project that provides CRUD operations for the Semantic Model provided by #file:SemanticModel.cs to the existing solution #file:GenAIDBExplorer.sln. Don't worry about authZ/authN as it will only run locally at the moment. It should be added as a new project to the #file:GenAIDBExplorer.sln . Call it `GenAIDBExplorer.WebApi`. Make sure you include guidance from #fetch https://learn.microsoft.com/en-us/aspnet/core/fundamentals/apis?view=aspnetcore-9.0.
[end]
Add a .NET 9 Web API app project that provides CRUD operations for the Semantic Model provided by #file:SemanticModel.cs to the existing solution #file:GenAIDBExplorer.sln . Don't worry about authZ/authN as it will only run locally at the moment. It should be added as a new project to the #file:GenAIDBExplorer.sln . Call it `GenAIDBExplorer.WebApi`. Make sure you first look up the relevant documentation using #microsoft_docs_search
[end]
/create-specification for a .NET 9 Web API app project that provides CRUD operations for the Semantic Model provided by #file:SemanticModel.cs . Don't worry about authZ/authN as it will only run locally at the moment. It should be added as a new project to the #file:GenAIDBExplorer.sln . Call the spec `spec-app-semanticmodel-webapi`. Make sure you include guidance from https://learn.microsoft.com/en-us/aspnet/core/fundamentals/apis?view=aspnetcore-9.0. Ensure you first look up any other relevant documentation using #microsoft_docs_search and include that in the spec.
[end]
Review the #file:spec-app-semanticmodel-webapi.md. How could I make this more maintainable, secure and performant? Give me a list of suggestions in a table with the following columns:
- Suggestion
- Reasoning
- Difficulty to implement (High, Medium, Low)
- Benefit of implementing the suggestion
[end]
Why not use Query String based API versioning?
[end]
/create-implementation-plan from the spec #file:spec-app-semanticmodel-webapi.md. Break it down into small atomoic phases with a complete working, buildable project at the end of each phase. Call it `plan-app-semanticmodel-webapi-v1`.
[end]
Build out Phase 1 of the implementation plan #file:plan-app-semanticmodel-webapi-v1.md. Update the completion status of the plan as you go.
[end]
@workspace How do I add a new Command to the Console App to remove semantic model items?
[end]
How do I add a new Command to the Console App to remove semantic model items?
[end]
Refactor the #file:GenAIDBExplorer.Console.csproj to update the System.CommandLine package to use version 2.0.0-beta5.25306.1.
[end]
Create a plan for updating the package System.CommandLine in #file:GenAIDBExplorer.Console from the current version in the project to 2.0.0-beta5.25306.1. You must #fetch https://learn.microsoft.com/en-us/dotnet/standard/commandline/migration-guide-2.0.0-beta5 and use these instructions to define the steps in the plan.
[end]
/create-github-issue-from-implementation-plan #file:upgrade-system-commandline-beta5.md using GitHub issue template #file:chore_request.yml template
[end]
/create-specification for the current implementation of the Semantic Model in the #file:GenAIDBExplorer.Core and call it `spec-data-semantic-model`
[end]
Review the #file:spec-data-semantic-model.md making any note of performance problems, especially as we increase the number of entities? List these as a table containing:
- Issue description
- Recommendation to resolve
- Priority (High, Medium, Low)
- Diffiulty to implement (High, Medium, Low)
- Benefit of resolving the issue
- Which engineering discipline recommended it.
- Include diagrams if appropriate to demonstrating the issue.
[end]
Create a table of suggested janitorial tasks that are needed for the Semantic Model #file:SemanticModel.cs based on the current implementation.
[end]
/create_spec SpecPurpose:Persisting the Semantic Model for a Database Schema for the Generative AI database explorer using a repository pattern. Define the specification requirements based on the current implementation in the #file:SchemaRepository.cs and #file:SemanticModelProvider.cs. Ensure you refer to the relevant interfaces.
[end]
What performance issues might be faced with the current implementation of the specification of #file:spec-data-semantic-model.md ? Put the answer in a table and include suggestions for improving performance of the specification.
[end]
I'd like to implement Lazy loading so that schema items are only completely loaded when they are acccessed and marking schema items as dirty, so that only changed items need to be saved. Please update the #file:spec-data-semantic-model.md specification with this requirement.
[end]
Compare the #file:spec-data-semantic-model.md specification with the current implementation of the #file:SchemaRepository.cs and #file:SemanticModelProvider.cs and identify what is not implemented.
[end]
/create_github_issue_feature_from_spec based on the features that are not currently implemented in the #file:spec-data-semantic-model.md . Identify the tasks that need to be included based on what is missing from #file:SchemaRepository.cs and #file:SemanticModelProvider.cs. Use the #create_issue tool to create the issue in the GitHub repository using the #file:feature_request.yml template.
[end]
Go ahead and create that as an GitHub issue using the #file:feature_request.yml issue template
[end]
/csharp-mstest Review #file:spec-data-semantic-model.md and identify any areas that need unit tests. Create a list of unit tests that should be created to ensure the functionality is tested.
[end]
/create-implementation-plan for implementing the unit tests identified in the previous step in file `plan-data-semantic-model-unit-tests.md`.
[end]
Create the tests in the implementation plan #file:plan-data-semantic-model-unit-tests.md.
[end]
Hey, do any of the Azure Verified Modules in the #file:main.bicep need updating? If so, what are details on the modules that need updating?
[end]
Nah, can you use #create_issue and the #file:chore_request.yml template to create an issue for each of the modules that need an update? All good yeah?
[end]
/update-avm-modules-in-bicep in #file:main.bicep
[end]
